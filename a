package com.example.stajprjoe.request;

import lombok.Data;

@Data
public class PageRequest {

    private String user1;
    private String user2;
    private int page = 0;    // default
    private int size = 20;
}

package com.example.stajprjoe.request;

import lombok.Data;

@Data
public class SearchRequest {

    private String user1;
    private String user2;
    private String keyword;    // arama terimi

    private int page = 0;
    private int size = 20;



}



package com.example.stajprjoe.controller;

import com.example.stajprjoe.request.SearchRequest;
import com.example.stajprjoe.response.MessageResponseDto;
import com.example.stajprjoe.service.MessageService;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.web.PageableDefault;
import org.springframework.web.bind.annotation.*;

@RestController
@RequiredArgsConstructor
@RequestMapping(path = "/messages")
public class MessageController {

    private final  MessageService messageService;

    @PostMapping("/page")
    public Page<MessageResponseDto> getMessages(@RequestBody com.example.stajprjoe.request.PageRequest req) {
        // timestamp'a göre en yeni önde olacak şekilde Pageable oluştur
        PageRequest pageable = PageRequest.of(
                req.getPage(),
                req.getSize(),
                Sort.by("timestamp").descending()
        );

        return messageService.getConversation(
                req.getUser1(),
                req.getUser2(),
                pageable
        );
    }

    @PostMapping("/search")
    public Page<MessageResponseDto> searchMessages(@RequestBody SearchRequest req) {
        PageRequest pageable = PageRequest.of(
                req.getPage(),
                req.getSize(),
                Sort.by("timestamp").descending()
        );
        return messageService.searchConversation(req, pageable);
    }

}
package com.example.stajprjoe.service;


import com.example.stajprjoe.Mapper;
import com.example.stajprjoe.request.SearchRequest;
import com.example.stajprjoe.response.MessageResponseDto;
import com.example.stajprjoe.repository.MessageRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;


@Service
@RequiredArgsConstructor
public class MessageService {

    private final MessageRepository messageRepository;

    private final Mapper mapper = new Mapper();

    public Page<MessageResponseDto> getConversation(String user1, String user2, Pageable pageable) {
        return messageRepository
                .findBySenderIdAndReceiverIdOrReceiverIdAndSenderId(user1, user2, user1, user2, pageable)
                .map(mapper::messageToResponseDto);
    }

    public Page<MessageResponseDto> searchConversation(SearchRequest req, Pageable pageable) {
        return messageRepository
                .findBySenderIdAndReceiverIdAndMessageTextContainingIgnoreCaseOrReceiverIdAndSenderIdAndMessageTextContainingIgnoreCase(
                        req.getUser1(), req.getUser2(), req.getKeyword(),
                        req.getUser1(), req.getUser2(), req.getKeyword(),
                        pageable
                )
                .map(mapper::messageToResponseDto);
    }
}

package com.example.stajprjoe.repository;

import com.example.stajprjoe.model.Message;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

@Repository
public interface MessageRepository extends JpaRepository<Message,Integer> {



    Page<Message> findBySenderIdAndReceiverIdOrReceiverIdAndSenderId(
            String senderId, String receiverId,
            String altSenderId, String altReceiverId,
            Pageable pageable
    );

    Page<Message> findBySenderIdAndReceiverIdAndMessageTextContainingIgnoreCaseOrReceiverIdAndSenderIdAndMessageTextContainingIgnoreCase(
            String senderId, String receiverId, String keyword1,
            String altSenderId, String altReceiverId, String keyword2,
            Pageable pageable
    );
}


